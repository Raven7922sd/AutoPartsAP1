@page "/Servicios/Edit/{ServicioId:int}"
@using Blazored.Toast.Services
@using AutoPartsAP1.Components.Models;
@inject ServiciosService servicioService
@inject NavigationManager navigationmanager
@inject IToastService itoastservice
@inject Microsoft.AspNetCore.Hosting.IWebHostEnvironment WebHostEnvironment
@rendermode InteractiveServer
@attribute [Authorize]
@attribute [Authorize(Roles="Admin")]


<PageTitle>Editar Producto</PageTitle>
@if (isLoading)
{
	<div class="d-flex justify-content-center align-items-center vh-100">
		<div class="spinner-border text-primary" style="width: 3rem; height: 3rem;" role="status">
			<span class="visually-hidden">Cargando...</span>
		</div>
	</div>
}
else
{
	<EditForm Model="Servicio" OnValidSubmit="Guardar" FormName="ServicioEdit">
		<DataAnnotationsValidator />
		<div class="container py-4">
			<div class="text-center mb-4">
				<h2 class="fw-bold text-primary">
					<i class="bi bi-gear-fill me-2"></i> Editar Servicio
				</h2>
				<p class="text-muted">Actualiza la información del servicio y su imagen.</p>
			</div>

			<div class="card shadow-sm rounded-4 border-0">
				<div class="card-body p-4">
					<div class="row g-4">
						<div class="col-md-7">
							<h5 class="mb-3 text-secondary">
								<i class="bi bi-info-circle me-2"></i> Detalles del Servicio
							</h5>
							<div class="row g-3">
								<div class="col-12">
									<label class="form-label fw-bold">ID del Servicio</label>
									<InputNumber class="form-control" @bind-Value="Servicio.ServicioId" readonly></InputNumber>
								</div>

								<div class="col-12">
									<label class="form-label fw-bold">Nombre</label>
									<InputText class="form-control" @bind-Value="Servicio.Nombre" placeholder="Escribe el nombre del servicio"></InputText>
									<ValidationMessage For="(() => Servicio.Nombre)"></ValidationMessage>
								</div>

								<div class="col-12">
									<label class="form-label fw-bold">Descripción</label>
									<InputTextArea class="form-control" @bind-Value="Servicio.Descripcion" placeholder="Añade una descripción detallada" rows="3"></InputTextArea>
									<ValidationMessage For="(() => Servicio.Descripcion)"></ValidationMessage>
								</div>

								<div class="col-md-6">
									<label class="form-label fw-bold">Monto (Precio)</label>
									<InputNumber class="form-control" step="0.01" @bind-Value="Servicio.Precio" placeholder="0.00"></InputNumber>
									<ValidationMessage For="(() => Servicio.Precio)"></ValidationMessage>
								</div>

								<div class="col-md-6">
									<label class="form-label fw-bold">Duración Estimada</label>
									<InputNumber class="form-control" step="0.01" @bind-Value="Servicio.DuracionEstimada" placeholder="0.00 horas"></InputNumber>
									<ValidationMessage For="(() => Servicio.DuracionEstimada)"></ValidationMessage>
								</div>
							</div>
						</div>

						<div class="col-md-5 d-flex flex-column align-items-center">
							<h5 class="mb-3 text-secondary">
								<i class="bi bi-image me-2"></i> Imagen del Servicio
							</h5>
							<div class="card p-3 w-100 rounded-4" style="border: 2px dashed #e9ecef; height: 100%;">
								<div class="d-flex flex-column justify-content-center align-items-center h-100">
									@if (Servicio.ServicioImagen != null)
									{
										<img src="data:image/png;base64,@Convert.ToBase64String(Servicio.ServicioImagen)"
											 class="img-fluid rounded-3 mb-3" alt="Imagen del servicio"
											 style="max-height: 250px; object-fit: contain; max-width: 100%;" />
									}
									else
									{
										<div class="text-center text-muted mb-3">
											<i class="bi bi-image-fill" style="font-size: 5rem;"></i>
											<p class="mt-2">No hay imagen seleccionada</p>
										</div>
									}
									<InputFile OnChange="SubirImagen" accept=".jpg,.jpeg,.png,.gif" class="form-control mt-auto" />
								</div>
							</div>
						</div>
					</div>
				</div>

				<div class="card-footer bg-light text-center py-3 rounded-bottom-4">
					<div class="btn-group" role="group">
						<button type="button" class="btn btn-danger d-flex align-items-center" @onclick="() => MostrarModal = true">
							<i class="bi bi-trash me-2"></i> Eliminar
						</button>
						<button type="submit" class="btn btn-success d-flex align-items-center">
							<i class="bi bi-save me-2"></i> Guardar Cambios
						</button>
						<a href="/Servicios/Index" class="btn btn-secondary d-flex align-items-center">
							<i class="bi bi-arrow-left me-2"></i> Volver
						</a>
					</div>
				</div>
			</div>
		</div>
	</EditForm>
}

@if (MostrarModal)
{
	<div class="modal fade show d-block" tabindex="-1" role="dialog" style="background-color: rgba(0,0,0,0.5);">
		<div class="modal-dialog modal-dialog-centered">
			<div class="modal-content shadow-lg rounded-4">
				<div class="modal-header bg-danger text-white py-3 rounded-top-4">
					<h5 class="modal-title w-100 text-center fw-bold">
						<i class="bi bi-exclamation-triangle-fill me-2"></i> Confirmar Eliminación
					</h5>
					<button type="button" class="btn-close btn-close-white" @onclick="CerrarModal" aria-label="Cerrar"></button>
				</div>
				<div class="modal-body text-center p-4">
					<p class="mb-4 fs-5 text-danger"><strong>¿Estás seguro de que deseas eliminar este servicio?</strong></p>
					<div class="alert alert-light text-start border rounded-3 p-3">
						<h6 class="fw-bold mb-2 text-dark">Detalles del Servicio:</h6>
						<ul class="list-unstyled mb-0">
							<li><strong>ID:</strong> @Servicio.ServicioId</li>
							<li><strong>Nombre:</strong> @Servicio.Nombre</li>
							<li><strong>Descripción:</strong> @Servicio.Descripcion</li>
							<li><strong>Monto:</strong> @Servicio.Precio.ToString("C")</li>
							<li><strong>Duración Estimada:</strong> @Servicio.DuracionEstimada</li>
						</ul>
					</div>
				</div>
				<div class="modal-footer justify-content-center bg-light rounded-bottom-4">
					<div class="btn-group" role="group">
						<button class="btn btn-danger d-flex align-items-center" @onclick="Eliminar">
							<i class="bi bi-trash-fill me-2"></i> Eliminar
						</button>
						<button class="btn btn-secondary d-flex align-items-center" @onclick="CerrarModal">
							<i class="bi bi-x-circle me-2"></i> Cancelar
						</button>
					</div>
				</div>
			</div>
		</div>
	</div>
}

@code {
	[Parameter]
	public int ServicioId { get; set; }

	public Servicios? Servicio { get; set; } = new Servicios();
	private bool MostrarModal = false;
	private bool isLoading = true;

	private IBrowserFile? selectedImageFile;

	protected override async Task OnInitializedAsync()
	{
		isLoading = true;

		if (ServicioId > 0)
		{
			Servicio = await servicioService.Buscar(ServicioId);
			if (Servicio == null)
			{
				itoastservice.ShowError("Servicio no encontrado.");
				navigationmanager.NavigateTo("/Servicios/Index");
				return;
			}
		}
		else
		{
			itoastservice.ShowError("ID del servicio inválido.");
			navigationmanager.NavigateTo("/Servicios/Index");
			return;
		}

		isLoading = false;
	}

	private void CerrarModal()
	{
		MostrarModal = false;
	}

	private async Task SubirImagen(InputFileChangeEventArgs e)
	{
		selectedImageFile = e.File;

		if (selectedImageFile != null)
		{
			if (selectedImageFile.Size > 5 * 1024 * 1024)
			{
				itoastservice.ShowError("La imagen no debe exceder los 5MB.");
				selectedImageFile = null;
				return;
			}

			try
			{
				var buffer = new byte[selectedImageFile.Size];
				await selectedImageFile.OpenReadStream().ReadAsync(buffer);
				Servicio.ServicioImagen = buffer;
			}
			catch (Exception ex)
			{
				itoastservice.ShowError($"Error al previsualizar la imagen: {ex.Message}");
				selectedImageFile = null;
			}
		}
	}


	private async Task Guardar()
	{
		if (selectedImageFile != null)
		{
			try
			{
				using var memoryStream = new MemoryStream();
				await selectedImageFile.OpenReadStream().CopyToAsync(memoryStream);
				Servicio.ServicioImagen = memoryStream.ToArray();
				itoastservice.ShowSuccess("Imagen cargada correctamente.");
			}
			catch (Exception ex)
			{
				itoastservice.ShowError($"Error al cargar la imagen: {ex.Message}");
				return;
			}
		}

		var guardo = await servicioService.GuardarServicio(this.Servicio);

		if (guardo != null)
		{
			itoastservice.ShowSuccess("Servicio guardado correctamente.");
			navigationmanager.NavigateTo("/Servicios/Index");
		}
		else
		{
			itoastservice.ShowError("Error al registrar el Servicio.");
		}
	}

	private async Task Eliminar()
	{
		if (Servicio != null)
		{
			var Eliminado = await servicioService.Eliminar(Servicio.ServicioId);
			if (Eliminado)
			{
				itoastservice.ShowSuccess("Producto eliminado correctamente.");
				navigationmanager.NavigateTo("/Productos/Index");
			}
			else
			{
				itoastservice.ShowError("Error al eliminar el Producto.");
			}
			MostrarModal = false;
		}
	}
}