@page "/Ventas/Edit/{VentaId:int}"
@inject VentasService ventasService
@inject ProductoService productoService
@rendermode InteractiveServer
@inject NavigationManager navigationManager
@inject IToastService toastService
@attribute [Authorize]
@attribute [Authorize(Roles = "Admin")]


<PageTitle>Editar Venta</PageTitle>


@if (venta == null || ProductosDisponibles == null)
{
	<div class="d-flex justify-content-center align-items-center" style="height: 100vh;">
		<div class="spinner-border text-primary" role="status">
			<span class="visually-hidden">Cargando...</span>
		</div>
	</div>
}
else
{
	<EditForm Model="@venta" OnValidSubmit="ActualizarVenta" FormName="VentasEdit">
		<DataAnnotationsValidator />
		<div class="container py-4">
			<div class="text-center mb-5">
				<h2 class="fw-bold text-primary">
					<i class="bi bi-receipt me-2"></i> Editar Venta
				</h2>
				<p class="text-muted">
					Actualiza la información general, los productos y los datos de pago de esta venta.
				</p>
			</div>

			<div class="card shadow-lg rounded-4 border-0 mb-4">
				<div class="card-body p-4 p-md-5">
					<div class="row g-5">

				
						<div class="col-md-4">
							<h5 class="mb-3 text-secondary border-bottom pb-2">
								<i class="bi bi-info-circle-fill me-2"></i> Detalles de la Venta
							</h5>
							<div class="mb-4">
								<label class="form-label fw-bold">ID de la Venta</label>
								<InputNumber class="form-control" @bind-Value="venta.VentaId" readonly />
							</div>
							<div class="mb-4">
								<label class="form-label fw-bold">Fecha de Venta</label>
								<InputDate class="form-control" @bind-Value="venta.Fecha" />
							</div>
							<div class="mb-4">
								<label class="form-label fw-bold">Total de la Venta</label>
								<div class="input-group">
									<span class="input-group-text">$</span>
									<InputNumber class="form-control" @bind-Value="venta.Total" readonly />
								</div>
							</div>
						</div>

						
						<div class="col-md-8">
							<h5 class="mb-3 text-secondary border-bottom pb-2">
								<i class="bi bi-list-ul me-2"></i> Productos en la Venta
							</h5>
							<div class="card p-4 mb-4 rounded-4 border-success border-2 bg-light">
								<div class="row g-3 align-items-end">
									<div class="col-md-6">
										<label class="form-label fw-bold mb-0">Producto</label>
										<InputSelect class="form-select form-control-lg" @bind-Value="SelectedProductoId">
											<option value="0" disabled>Seleccione un producto</option>
											@foreach (var producto in ProductosDisponibles)
											{
												<option value="@producto.ProductoId">@producto.ProductoNombre</option>
											}
										</InputSelect>
									</div>
									<div class="col-md-3">
										<label class="form-label fw-bold mb-0">Cantidad</label>
										<InputNumber class="form-control form-control-lg" @bind-Value="CantidadDetalle" />
									</div>
									<div class="col-md-3">
										<button type="button" class="btn btn-success w-100 d-flex align-items-center justify-content-center btn-lg" @onclick="AgregarProductoDetalleService">
											<i class="bi bi-plus-lg me-2"></i> Agregar
										</button>
									</div>
								</div>
							</div>

							<div class="table-responsive">
								<table class="table table-hover table-striped align-middle text-center rounded-3 overflow-hidden">
									<thead class="table-dark">
										<tr>
											<th>Producto</th>
											<th>Cantidad</th>
											<th>Precio Unitario</th>
											<th>Subtotal</th>
											<th>Acciones</th>
										</tr>
									</thead>
									<tbody>
										@if (venta.VentasDetalles != null && venta.VentasDetalles.Any())
										{
											@foreach (var detalle in venta.VentasDetalles)
											{
												<tr>
													<td>@detalle.Producto?.ProductoNombre</td>
													<td>@detalle.Cantidad</td>
													<td>@detalle.PrecioUnitario.ToString("C")</td>
													<td>@((detalle.PrecioUnitario * detalle.Cantidad).ToString("C"))</td>
													<td>
														<button type="button" class="btn btn-outline-danger btn-sm" @onclick="@(() => RemoverProductoDetalle(detalle))" title="Remover producto">
															<i class="bi bi-trash-fill"></i>
														</button>
													</td>
												</tr>
											}
										}
										else
										{
											<tr>
												<td colspan="5" class="text-center text-muted py-3">No hay productos agregados a esta venta.</td>
											</tr>
										}
									</tbody>
								</table>
							</div>
						</div>

					
						<div class="col-12 mt-4">
							<h5 class="mb-3 text-secondary border-bottom pb-2">
								<i class="bi bi-credit-card-2-front-fill me-2"></i> Datos de Pago
							</h5>
							@if (venta.VentasDetalles.Any() && venta.VentasDetalles.First().Pago != null)
							{
								var pago = venta.VentasDetalles.First().Pago;
								<div class="row g-4">
									<div class="col-md-6 col-lg-4">
										<div class="form-floating">
											<InputText class="form-control" id="nombreTitular" @bind-Value="pago.NombreTitular" />
											<label for="nombreTitular">Nombre del Titular</label>
										</div>
									</div>
									<div class="col-md-6 col-lg-4">
										<div class="form-floating">
											<InputText class="form-control" id="numeroTarjeta" @bind-Value="pago.NumeroTarjeta" maxlength="19" />
											<label for="numeroTarjeta">Número de Tarjeta</label>
										</div>
									</div>
									<div class="col-md-6 col-lg-2">
										<div class="form-floating">
											<InputText class="form-control" id="fechaExpiracion" @bind-Value="pago.FechaExpiracion" placeholder="MM/AA" maxlength="5" />
											<label for="fechaExpiracion">Fecha Exp. (MM/AA)</label>
										</div>
									</div>
									<div class="col-md-6 col-lg-2">
										<div class="form-floating">
											<InputText class="form-control" id="cvv" @bind-Value="pago.CVV" maxlength="4" />
											<label for="cvv">CVV</label>
										</div>
										<ValidationMessage For="@(() => pago.CVV)" class="text-danger" />
									</div>
									<div class="col-12">
										<div class="form-floating">
											<InputText class="form-control" id="direccion" @bind-Value="pago.Direccion" />
											<label for="direccion">Dirección de Envío</label>
										</div>
									</div>
								</div>
							}
							else
							{
								<p class="text-muted text-center py-4">
									Para ingresar los datos de pago, primero debes agregar al menos un producto a la venta.
								</p>
							}
						</div>
					</div>
				</div>
			</div>

			
			<div class="text-center mt-5 mb-3">
				<div class="btn-group" role="group">
					<a href="/Ventas/Index" class="btn btn-secondary btn-lg d-flex align-items-center px-4">
						<i class="bi bi-arrow-left me-2"></i> Volver al Listado
					</a>
					<button type="submit" class="btn btn-success btn-lg d-flex align-items-center px-4">
						<i class="bi bi-save-fill me-2"></i> Guardar Cambios
					</button>
					<button type="button" class="btn btn-danger btn-lg d-flex align-items-center px-4" @onclick="() => MostrarModalEliminar = true">
						<i class="bi bi-trash-fill me-2"></i> Eliminar
					</button>
				</div>
			</div>
		</div>
	</EditForm>
	}
@if (MostrarModalEliminar)
{
	<div class="modal fade show d-block" tabindex="-1" role="dialog" style="background-color: rgba(0,0,0,0.5);">
		<div class="modal-dialog modal-dialog-centered">
			<div class="modal-content shadow-lg rounded-4">
				<div class="modal-header bg-danger text-white py-3 rounded-top-4">
					<h5 class="modal-title w-100 text-center fw-bold">
						<i class="bi bi-exclamation-triangle-fill me-2"></i> Confirmar Eliminación
					</h5>
					<button type="button" class="btn-close btn-close-white" @onclick="() => MostrarModalEliminar = false" aria-label="Cerrar"></button>
				</div>
				<div class="modal-body text-center p-4">
					<p class="mb-4 fs-5 text-danger"><strong>¿Estás seguro de que deseas eliminar esta venta?</strong></p>
					<div class="alert alert-light text-start border rounded-3 p-3">
						<h6 class="fw-bold mb-2 text-dark">Detalles de la Venta:</h6>
						<ul class="list-unstyled mb-0">
							<li><strong>ID:</strong> @venta.VentaId</li>
							<li><strong>Fecha:</strong> @venta.Fecha.ToString("dd/MM/yyyy")</li>
							<li><strong>Monto Total:</strong> @venta.Total.ToString("C")</li>
						</ul>
					</div>
				</div>
				<div class="modal-footer justify-content-center bg-light rounded-bottom-4">
					<div class="btn-group" role="group">
						<button class="btn btn-danger d-flex align-items-center" @onclick="EliminarVentaConfirmada">
							<i class="bi bi-trash-fill me-2"></i> Eliminar
						</button>
						<button class="btn btn-secondary d-flex align-items-center" @onclick="() => MostrarModalEliminar = false">
							<i class="bi bi-x-circle me-2"></i> Cancelar
						</button>
					</div>
				</div>
			</div>
		</div>
	</div>
}

@code {
	[Parameter] public int VentaId { get; set; }
	private Ventas venta = new();
	private List<Productos> ProductosDisponibles = new();

	private int SelectedProductoId { get; set; }
	private int CantidadDetalle { get; set; }
	private List<DetalleOriginal> detallesOriginales = new();

	private bool MostrarModalEliminar { get; set; } = false;

	protected override async Task OnInitializedAsync()
	{
		ProductosDisponibles = await productoService.Listar(p => true);

		if (VentaId > 0)
		{
			var VentaEncontrada = await ventasService.BuscarVentas(VentaId);
			if (VentaEncontrada != null)
			{
				venta = VentaEncontrada;

				foreach (var d in venta.VentasDetalles)
				{
					if (d.Pago == null)
						d.Pago = new PagoModel();
				}

				detallesOriginales = venta.VentasDetalles
					.Select(d => new DetalleOriginal
						{
							ProductoId = d.ProductoId,
							Cantidad = d.Cantidad
						}).ToList();
			}
			else
			{
				navigationManager.NavigateTo("/Ventas/Index");
			}
		}
		else
		{
			navigationManager.NavigateTo("/Ventas/Create");
		}

		if (venta.VentasDetalles == null)
		{
			venta.VentasDetalles = new List<VentasDetalles>();
		}
	}

	private async Task ActualizarVenta()
	{
		if (venta.VentasDetalles == null || !venta.VentasDetalles.Any())
		{
			toastService.ShowWarning("Debe agregar al menos un producto.");
			return;
		}

		var actualizado = await ventasService.Modificar(venta);

		if (actualizado)
		{
			toastService.ShowSuccess("Venta actualizada correctamente.");
			navigationManager.NavigateTo("/Ventas/Index");
		}
		else
		{
			toastService.ShowError("Ocurrió un error al actualizar la venta.");
		}
	}


	private void AgregarProductoDetalleService()
	{
		venta.VentasDetalles ??= new List<VentasDetalles>();

		if (SelectedProductoId <= 0 || CantidadDetalle <= 0)
		{
			toastService.ShowWarning("Seleccione un producto y una cantidad válida.");
			return;
		}

		bool agregado = ventasService.AgregarProductoDetalleMemoria(venta, SelectedProductoId, CantidadDetalle, ProductosDisponibles);

		if (agregado)
		{
			var nuevo = venta.VentasDetalles.Last();
			if (nuevo.Pago == null)
				nuevo.Pago = new PagoModel();

			toastService.ShowSuccess("Producto agregado correctamente.");
		}
		else
		{
			toastService.ShowError("La cantidad excede el stock disponible.");
		}

		SelectedProductoId = 0;
		CantidadDetalle = 0;
		StateHasChanged();
	}


	private void RemoverProductoDetalle(VentasDetalles detalleToRemove)
	{
		SelectedProductoId = detalleToRemove.ProductoId;
		CantidadDetalle = (int)detalleToRemove.Cantidad;

		// Aumentar la existencia temporal del producto en la lista local
		var producto = ProductosDisponibles.FirstOrDefault(p => p.ProductoId == detalleToRemove.ProductoId);
		if (producto != null)
		{
			producto.ProductoCantidad += detalleToRemove.Cantidad;
		}

		venta.VentasDetalles.Remove(detalleToRemove);

		toastService.ShowInfo("Producto removido del detalle y stock actualizado temporalmente.");

		StateHasChanged();
	}


	private void MostrarModalEliminarConfirmacion() => MostrarModalEliminar = true;

	private void CerrarModalEliminar() => MostrarModalEliminar = false;

	private async Task EliminarVentaConfirmada()
	{
		CerrarModalEliminar();

		bool eliminado = await ventasService.EliminarVentas(venta.VentaId);
		if (eliminado)
		{
			toastService.ShowSuccess("Venta eliminada exitosamente!");
			navigationManager.NavigateTo("/Ventas/Index");
		}
		else
		{
			toastService.ShowError("Error al eliminar la Venta.");
		}
	}
}