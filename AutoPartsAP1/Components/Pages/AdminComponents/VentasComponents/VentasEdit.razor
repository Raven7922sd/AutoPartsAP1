@page "/Ventas/Edit/{VentaId:int}"
@inject VentasService ventasService
@inject ProductoService productoService
@rendermode InteractiveServer
@inject NavigationManager navigationManager
@inject IToastService toastService
@attribute [Authorize]
@attribute [Authorize(Roles = "Admin")]


<PageTitle>Editar Venta</PageTitle>

<EditForm Model="@venta" OnValidSubmit="ActualizarVenta" FormName="VentasEdit">
	<DataAnnotationsValidator />
	<div class="container py-4">
		<div class="text-center mb-4">
			<h2 class="fw-bold text-primary">
				<i class="bi bi-receipt me-2"></i> Editar Venta
			</h2>
			<p class="text-muted">Actualiza los detalles de la venta y los productos asociados.</p>
		</div>

		<div class="card shadow-sm rounded-4 border-0">
			<div class="card-body p-4">
				<div class="row g-4">
					<div class="col-md-4">
						<h5 class="mb-3 text-secondary">
							<i class="bi bi-info-circle me-2"></i> Información General
						</h5>
						<div class="mb-3">
							<label class="form-label fw-bold">ID de la Venta</label>
							<InputNumber class="form-control" @bind-Value="venta.VentaId" readonly />
						</div>
						<div class="mb-3">
							<label class="form-label fw-bold">Fecha</label>
							<InputDate class="form-control" @bind-Value="venta.Fecha" />
						</div>
					</div>

					<div class="col-md-8">
						<h5 class="mb-3 text-secondary">
							<i class="bi bi-cart me-2"></i> Productos Vendidos
						</h5>

						<div class="card p-3 mb-4 rounded-3 border-success border-2">
							<div class="row g-2 align-items-end">
								<div class="col-sm-5">
									<label class="form-label fw-bold mb-0">Producto</label>
									<InputSelect class="form-select" @bind-Value="SelectedProductoId">
										<option value="0" disabled>Seleccione un producto</option>
										@foreach (var producto in ProductosDisponibles)
										{
											<option value="@producto.ProductoId">@producto.ProductoNombre</option>
										}
									</InputSelect>
								</div>
								<div class="col-sm-4">
									<label class="form-label fw-bold mb-0">Cantidad</label>
									<InputNumber class="form-control" @bind-Value="CantidadDetalle" />
								</div>
								<div class="col-sm-3">
									<button type="button" class="btn btn-success w-100 d-flex align-items-center justify-content-center" @onclick="AgregarProductoDetalleService">
										<i class="bi bi-plus-lg me-2"></i> Agregar
									</button>
								</div>
							</div>
						</div>

						<div class="table-responsive">
							<table class="table table-bordered table-striped align-middle text-center">
								<thead class="table-light">
									<tr>
										<th>Producto</th>
										<th>Cantidad</th>
										<th>Precio Unitario</th>
										<th>Dirección</th>
										<th>Usuario</th>
										<th>Remover</th>
									</tr>
								</thead>
								<tbody>
									@if (venta.VentasDetalles != null && venta.VentasDetalles.Any())
									{
										@foreach (var detalle in venta.VentasDetalles)
										{
											<tr>
												<td>@detalle.Producto?.ProductoNombre</td>
												<td>@detalle.Cantidad</td>
												<td>@(((detalle.Producto?.ProductoMonto ?? 0) * detalle.Cantidad).ToString("C"))</td>

												<td>
													<button type="button" class="btn btn-outline-danger btn-sm" @onclick="@(() => RemoverProductoDetalle(detalle))">
														<i class="bi bi-trash"></i>
													</button>
												</td>
											</tr>
										}
									}
									else
									{
										<tr>
											<td colspan="5" class="text-center text-muted">No hay productos agregados a esta venta.</td>
										</tr>
									}
								</tbody>
							</table>
						</div>
					</div>
				</div>
			</div>

			<div class="card-footer bg-light text-center py-3 rounded-bottom-4">
				<div class="btn-group" role="group">
					<a href="/Ventas/Index" class="btn btn-secondary d-flex align-items-center">
						<i class="bi bi-arrow-left me-2"></i> Volver al Listado
					</a>
					<button type="submit" class="btn btn-success d-flex align-items-center">
						<i class="bi bi-save me-2"></i> Guardar Cambios
					</button>
					<button type="button" class="btn btn-danger d-flex align-items-center" @onclick="() => MostrarModalEliminar = true">
						<i class="bi bi-trash me-2"></i> Eliminar
					</button>
				</div>
			</div>
		</div>
	</div>
</EditForm>

@if (MostrarModalEliminar)
{
	<div class="modal fade show d-block" tabindex="-1" role="dialog" style="background-color: rgba(0,0,0,0.5);">
		<div class="modal-dialog modal-dialog-centered">
			<div class="modal-content shadow-lg rounded-4">
				<div class="modal-header bg-danger text-white py-3 rounded-top-4">
					<h5 class="modal-title w-100 text-center fw-bold">
						<i class="bi bi-exclamation-triangle-fill me-2"></i> Confirmar Eliminación
					</h5>
					<button type="button" class="btn-close btn-close-white" @onclick="() => MostrarModalEliminar = false" aria-label="Cerrar"></button>
				</div>
				<div class="modal-body text-center p-4">
					<p class="mb-4 fs-5 text-danger"><strong>¿Estás seguro de que deseas eliminar esta venta?</strong></p>
					<div class="alert alert-light text-start border rounded-3 p-3">
						<h6 class="fw-bold mb-2 text-dark">Detalles de la Venta:</h6>
						<ul class="list-unstyled mb-0">
							<li><strong>ID:</strong> @venta.VentaId</li>
							<li><strong>Fecha:</strong> @venta.Fecha.ToString("dd/MM/yyyy")</li>
							<li><strong>Monto Total:</strong> @venta.Total.ToString("C")</li>
						</ul>
					</div>
				</div>
				<div class="modal-footer justify-content-center bg-light rounded-bottom-4">
					<div class="btn-group" role="group">
						<button class="btn btn-danger d-flex align-items-center" @onclick="EliminarVentaConfirmada">
							<i class="bi bi-trash-fill me-2"></i> Eliminar
						</button>
						<button class="btn btn-secondary d-flex align-items-center" @onclick="() => MostrarModalEliminar = false">
							<i class="bi bi-x-circle me-2"></i> Cancelar
						</button>
					</div>
				</div>
			</div>
		</div>
	</div>
}

@code {
	[Parameter] public int VentaId { get; set; }
	private Ventas venta = new();
	private List<Productos> ProductosDisponibles = new();

	private int SelectedProductoId { get; set; }
	private int CantidadDetalle { get; set; }
	private List<DetalleOriginal> detallesOriginales = new();

	private bool MostrarModalEliminar { get; set; } = false;

	protected override async Task OnInitializedAsync()
	{
		ProductosDisponibles = await productoService.Listar(p => true);

		if (VentaId > 0)
		{
			// ---- Se ha cambiado esta línea para usar el nuevo método de servicio ----
			var VentaEncontrada = await ventasService.ObtenerVentaConDetallesYPago(VentaId);
			if (VentaEncontrada != null)
			{
				venta = VentaEncontrada;

				foreach (var d in venta.VentasDetalles)
				{
					if (d.Pago == null)
						d.Pago = new PagoModel();
				}

				detallesOriginales = venta.VentasDetalles
					.Select(d => new DetalleOriginal
						{
							ProductoId = d.ProductoId,
							Cantidad = d.Cantidad
						}).ToList();
			}
			else
			{
				navigationManager.NavigateTo("/Ventas/Index");
			}
		}
		else
		{
			navigationManager.NavigateTo("/Ventas/Create");
		}

		if (venta.VentasDetalles == null)
		{
			venta.VentasDetalles = new List<VentasDetalles>();
		}
	}

	private async Task ActualizarVenta()
	{
		// Paso 1: Verificación inicial.
		// Si la lista de detalles está vacía, se muestra una advertencia.
		if (venta.VentasDetalles == null || !venta.VentasDetalles.Any())
		{
			toastService.ShowWarning("Debe agregar al menos un producto.");
			return;
		}

		// El servicio ahora maneja toda la lógica de stock.
		var actualizado = await ventasService.Modificar(venta);

		if (actualizado)
		{
			toastService.ShowSuccess("Venta actualizada correctamente.");
			navigationManager.NavigateTo("/Ventas/Index");
		}
		else
		{
			toastService.ShowError("Ocurrió un error al actualizar la venta.");
		}
	}


	private async Task AgregarProductoDetalleService()
	{
		venta.VentasDetalles ??= new List<VentasDetalles>();

		if (SelectedProductoId <= 0 || CantidadDetalle <= 0)
		{
			toastService.ShowWarning("Seleccione un producto y una cantidad válida.");
			return;
		}

		bool agregado = await ventasService.AgregarProductoDetalle(venta, SelectedProductoId, CantidadDetalle);

		if (agregado)
		{
			// Obtener el detalle que acaba de ser agregado.
			var nuevoDetalle = venta.VentasDetalles
				.FirstOrDefault(d => d.ProductoId == SelectedProductoId);

			// ---- ¡NUEVA LÍNEA AÑADIDA AQUÍ! ----
			// Asegurarse de que el objeto Pago no sea null.
			if (nuevoDetalle != null && nuevoDetalle.Pago == null)
			{
				nuevoDetalle.Pago = new PagoModel();
			}

			toastService.ShowSuccess("Producto agregado correctamente.");
		}
		else
		{
			toastService.ShowError("La cantidad excede el stock disponible.");
		}

		SelectedProductoId = 0;
		CantidadDetalle = 0;
		StateHasChanged();
	}
	private void RemoverProductoDetalle(VentasDetalles detalleToRemove)
	{
		SelectedProductoId = detalleToRemove.ProductoId;
		CantidadDetalle = (int)detalleToRemove.Cantidad;

		venta.VentasDetalles.Remove(detalleToRemove);

		toastService.ShowInfo("Producto removido del detalle.");

		StateHasChanged();
	}

	private void MostrarModalEliminarConfirmacion() => MostrarModalEliminar = true;

	private void CerrarModalEliminar() => MostrarModalEliminar = false;

	private async Task EliminarVentaConfirmada()
	{
		CerrarModalEliminar();

		bool eliminado = await ventasService.EliminarVentas(venta.VentaId);
		if (eliminado)
		{
			toastService.ShowSuccess("Venta eliminada exitosamente!");
			navigationManager.NavigateTo("/Ventas/Index");
		}
		else
		{
			toastService.ShowError("Error al eliminar la Venta.");
		}
	}
}